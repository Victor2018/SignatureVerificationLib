//// Created by victor on 2017/3/16.//#include <jni.h>#include <string.h>#include <stdio.h>#include "com_victor_sign_util_SignVerificationUtil.h"/** *这个key是和服务器之间通信的秘钥 */const char* AUTH_KEY = "服务器通信秘钥";/** * 发布的app 签名,只有和本签名一致的app 才会返回 AUTH_KEY * 这个RELEASE_SIGN的值是上一步用java代码获取的值 */const char* RELEASE_SIGN = "这是合法的签名字符串";/** * 发布的app 签名 的HashCode */int RELEASE_SIGN_HASHCODE = -368876822;JNIEXPORT jboolean JNICALL Java_com_victor_sign_util_SignVerificationUtil_checkSignature        (JNIEnv *env, jclass jclazz, jint release_sign_hashcode, jobject contextObject){    RELEASE_SIGN_HASHCODE = release_sign_hashcode;    jclass native_class = env->GetObjectClass(contextObject);    jmethodID pm_id = env->GetMethodID(native_class, "getPackageManager", "()Landroid/content/pm/PackageManager;");    jobject pm_obj = env->CallObjectMethod(contextObject, pm_id);    jclass pm_clazz = env->GetObjectClass(pm_obj);// 得到 getPackageInfo 方法的 ID    jmethodID package_info_id = env->GetMethodID(pm_clazz, "getPackageInfo","(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;");    jclass native_classs = env->GetObjectClass(contextObject);    jmethodID mId = env->GetMethodID(native_classs, "getPackageName", "()Ljava/lang/String;");    jstring pkg_str = static_cast<jstring>(env->CallObjectMethod(contextObject, mId));// 获得应用包的信息    jobject pi_obj = env->CallObjectMethod(pm_obj, package_info_id, pkg_str, 64);// 获得 PackageInfo 类    jclass pi_clazz = env->GetObjectClass(pi_obj);// 获得签名数组属性的 ID    jfieldID signatures_fieldId = env->GetFieldID(pi_clazz, "signatures", "[Landroid/content/pm/Signature;");    jobject signatures_obj = env->GetObjectField(pi_obj, signatures_fieldId);    jobjectArray signaturesArray = (jobjectArray)signatures_obj;    jsize size = env->GetArrayLength(signaturesArray);    jobject signature_obj = env->GetObjectArrayElement(signaturesArray, 0);    jclass signature_clazz = env->GetObjectClass(signature_obj);    //第一种方式--检查签名字符串的方式    /*jmethodID string_id = env->GetMethodID(signature_clazz, "toCharsString", "()Ljava/lang/String;");    jstring str = static_cast<jstring>(env->CallObjectMethod(signature_obj, string_id));    char *c_msg = (char*)env->GetStringUTFChars(str,0);    if(strcmp(c_msg,RELEASE_SIGN)==0)//签名一致  返回合法的 api key，否则返回错误    {        return (env)->NewStringUTF(AUTH_KEY);    }else    {        return (env)->NewStringUTF("error");    }*/    //第二种方式--检查签名的hashCode的方式    jmethodID int_hashcode = env->GetMethodID(signature_clazz, "hashCode", "()I");    jint hashCode = env->CallIntMethod(signature_obj, int_hashcode);    if(hashCode == RELEASE_SIGN_HASHCODE)    {        return true;    }else{        return false;    }}